buildscript {
    apply from: 'dependencies.gradle'
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'idea'
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'org.sonarqube' version "${sonarcubeVersion}"
    id 'org.springframework.boot' version "${springBootVersion}"
}

allprojects  {
    group = 'org.ks-plus'
    version = '0.1.0-SNAPSHOT'
}

subprojects {
    repositories {
        mavenCentral()
        maven { url 'https://repo.maven.apache.org/maven2' }
    }

    apply plugin: 'java-library'

    sourceCompatibility = 17
    targetCompatibility = 17

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

configure(subprojects.findAll { !it.name.endsWith('.api') } ) {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    dependencies {
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        implementation "com.google.cloud:google-cloud-logging-logback:${googleCloudLoggingLogbackVersion}"

        // Testing libraries and frameworks
        testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testImplementation "org.mockito:mockito-core:${mockitoVersion}"
        testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

        // Lombok
        annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        testImplementation "org.projectlombok:lombok:${lombokVersion}"
    }

    test {
        useJUnitPlatform()
    }

    jacocoTestReport {
        reports {
            xml.required = true
        }
    }
    test.finalizedBy jacocoTestReport
}

configure(subprojects.findAll { it.name.endsWith('.impl') } ) {

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-hateoas'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        runtimeOnly 'com.h2database:h2'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
        testImplementation project(':commons:testing')
    }
}

allprojects {
    gradle.projectsEvaluated {
        // Include deprecation warnings in compilation output
        tasks.withType(JavaCompile).tap {
            configureEach {
                options.encoding = 'UTF-8'
                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            }
        }

        // Address the following compilation warning:
        // "OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended"
        tasks.withType(Test).tap {
            configureEach {
                options {jvmArgs("-Xshare:off")}
            }
        }
        // Also see https://stackoverflow.com/questions/54205486

        // Enable dependency injection, property binding etc. based on parameter names
        tasks.withType(JavaCompile).configureEach {
            options.compilerArgs.add("-parameters")
        }
        // Also see https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x#parameter-name-retention
    }
}

sonarqube {
    properties {
        property "sonar.coverage.jacoco.xmlReportPaths", "./server/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "ksch-workflows"
        property "sonar.projectKey", "ksch-workflows_backend"
    }
}

def sonarqubeDependencies = new LinkedHashSet()
subprojects {
    sonarqubeDependencies.addAll(
        tasks.findAll({ it.name.contains('jacocoTestReport') || it.name == 'test' })
    )
}
rootProject.tasks.sonarqube.dependsOn = sonarqubeDependencies
// Also see https://stackoverflow.com/a/73506443/2339010
